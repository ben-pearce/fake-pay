/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.pay.fakepay.thrift;

import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.EncodingUtils;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.EnumSet;
import java.util.Collections;
import javax.annotation.Generated;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2021-4-7")
public class TimestampResponse implements org.apache.thrift.TBase<TimestampResponse, TimestampResponse._Fields>, java.io.Serializable, Cloneable, Comparable<TimestampResponse> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("TimestampResponse");

  private static final org.apache.thrift.protocol.TField YEAR_FIELD_DESC = new org.apache.thrift.protocol.TField("year", org.apache.thrift.protocol.TType.I32, (short)1);
  private static final org.apache.thrift.protocol.TField MONTH_FIELD_DESC = new org.apache.thrift.protocol.TField("month", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField DATE_FIELD_DESC = new org.apache.thrift.protocol.TField("date", org.apache.thrift.protocol.TType.I32, (short)3);
  private static final org.apache.thrift.protocol.TField HRS_FIELD_DESC = new org.apache.thrift.protocol.TField("hrs", org.apache.thrift.protocol.TType.I32, (short)4);
  private static final org.apache.thrift.protocol.TField MIN_FIELD_DESC = new org.apache.thrift.protocol.TField("min", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField SEC_FIELD_DESC = new org.apache.thrift.protocol.TField("sec", org.apache.thrift.protocol.TType.I32, (short)6);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new TimestampResponseStandardSchemeFactory());
    schemes.put(TupleScheme.class, new TimestampResponseTupleSchemeFactory());
  }

  public int year; // required
  public int month; // required
  public int date; // required
  public int hrs; // required
  public int min; // required
  public int sec; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    YEAR((short)1, "year"),
    MONTH((short)2, "month"),
    DATE((short)3, "date"),
    HRS((short)4, "hrs"),
    MIN((short)5, "min"),
    SEC((short)6, "sec");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // YEAR
          return YEAR;
        case 2: // MONTH
          return MONTH;
        case 3: // DATE
          return DATE;
        case 4: // HRS
          return HRS;
        case 5: // MIN
          return MIN;
        case 6: // SEC
          return SEC;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __YEAR_ISSET_ID = 0;
  private static final int __MONTH_ISSET_ID = 1;
  private static final int __DATE_ISSET_ID = 2;
  private static final int __HRS_ISSET_ID = 3;
  private static final int __MIN_ISSET_ID = 4;
  private static final int __SEC_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.YEAR, new org.apache.thrift.meta_data.FieldMetaData("year", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MONTH, new org.apache.thrift.meta_data.FieldMetaData("month", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.DATE, new org.apache.thrift.meta_data.FieldMetaData("date", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.HRS, new org.apache.thrift.meta_data.FieldMetaData("hrs", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.MIN, new org.apache.thrift.meta_data.FieldMetaData("min", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.SEC, new org.apache.thrift.meta_data.FieldMetaData("sec", org.apache.thrift.TFieldRequirementType.REQUIRED, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(TimestampResponse.class, metaDataMap);
  }

  public TimestampResponse() {
  }

  public TimestampResponse(
    int year,
    int month,
    int date,
    int hrs,
    int min,
    int sec)
  {
    this();
    this.year = year;
    setYearIsSet(true);
    this.month = month;
    setMonthIsSet(true);
    this.date = date;
    setDateIsSet(true);
    this.hrs = hrs;
    setHrsIsSet(true);
    this.min = min;
    setMinIsSet(true);
    this.sec = sec;
    setSecIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public TimestampResponse(TimestampResponse other) {
    __isset_bitfield = other.__isset_bitfield;
    this.year = other.year;
    this.month = other.month;
    this.date = other.date;
    this.hrs = other.hrs;
    this.min = other.min;
    this.sec = other.sec;
  }

  public TimestampResponse deepCopy() {
    return new TimestampResponse(this);
  }

  @Override
  public void clear() {
    setYearIsSet(false);
    this.year = 0;
    setMonthIsSet(false);
    this.month = 0;
    setDateIsSet(false);
    this.date = 0;
    setHrsIsSet(false);
    this.hrs = 0;
    setMinIsSet(false);
    this.min = 0;
    setSecIsSet(false);
    this.sec = 0;
  }

  public int getYear() {
    return this.year;
  }

  public TimestampResponse setYear(int year) {
    this.year = year;
    setYearIsSet(true);
    return this;
  }

  public void unsetYear() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  /** Returns true if field year is set (has been assigned a value) and false otherwise */
  public boolean isSetYear() {
    return EncodingUtils.testBit(__isset_bitfield, __YEAR_ISSET_ID);
  }

  public void setYearIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __YEAR_ISSET_ID, value);
  }

  public int getMonth() {
    return this.month;
  }

  public TimestampResponse setMonth(int month) {
    this.month = month;
    setMonthIsSet(true);
    return this;
  }

  public void unsetMonth() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  /** Returns true if field month is set (has been assigned a value) and false otherwise */
  public boolean isSetMonth() {
    return EncodingUtils.testBit(__isset_bitfield, __MONTH_ISSET_ID);
  }

  public void setMonthIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MONTH_ISSET_ID, value);
  }

  public int getDate() {
    return this.date;
  }

  public TimestampResponse setDate(int date) {
    this.date = date;
    setDateIsSet(true);
    return this;
  }

  public void unsetDate() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  /** Returns true if field date is set (has been assigned a value) and false otherwise */
  public boolean isSetDate() {
    return EncodingUtils.testBit(__isset_bitfield, __DATE_ISSET_ID);
  }

  public void setDateIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __DATE_ISSET_ID, value);
  }

  public int getHrs() {
    return this.hrs;
  }

  public TimestampResponse setHrs(int hrs) {
    this.hrs = hrs;
    setHrsIsSet(true);
    return this;
  }

  public void unsetHrs() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __HRS_ISSET_ID);
  }

  /** Returns true if field hrs is set (has been assigned a value) and false otherwise */
  public boolean isSetHrs() {
    return EncodingUtils.testBit(__isset_bitfield, __HRS_ISSET_ID);
  }

  public void setHrsIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __HRS_ISSET_ID, value);
  }

  public int getMin() {
    return this.min;
  }

  public TimestampResponse setMin(int min) {
    this.min = min;
    setMinIsSet(true);
    return this;
  }

  public void unsetMin() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  /** Returns true if field min is set (has been assigned a value) and false otherwise */
  public boolean isSetMin() {
    return EncodingUtils.testBit(__isset_bitfield, __MIN_ISSET_ID);
  }

  public void setMinIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __MIN_ISSET_ID, value);
  }

  public int getSec() {
    return this.sec;
  }

  public TimestampResponse setSec(int sec) {
    this.sec = sec;
    setSecIsSet(true);
    return this;
  }

  public void unsetSec() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __SEC_ISSET_ID);
  }

  /** Returns true if field sec is set (has been assigned a value) and false otherwise */
  public boolean isSetSec() {
    return EncodingUtils.testBit(__isset_bitfield, __SEC_ISSET_ID);
  }

  public void setSecIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __SEC_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case YEAR:
      if (value == null) {
        unsetYear();
      } else {
        setYear((Integer)value);
      }
      break;

    case MONTH:
      if (value == null) {
        unsetMonth();
      } else {
        setMonth((Integer)value);
      }
      break;

    case DATE:
      if (value == null) {
        unsetDate();
      } else {
        setDate((Integer)value);
      }
      break;

    case HRS:
      if (value == null) {
        unsetHrs();
      } else {
        setHrs((Integer)value);
      }
      break;

    case MIN:
      if (value == null) {
        unsetMin();
      } else {
        setMin((Integer)value);
      }
      break;

    case SEC:
      if (value == null) {
        unsetSec();
      } else {
        setSec((Integer)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case YEAR:
      return Integer.valueOf(getYear());

    case MONTH:
      return Integer.valueOf(getMonth());

    case DATE:
      return Integer.valueOf(getDate());

    case HRS:
      return Integer.valueOf(getHrs());

    case MIN:
      return Integer.valueOf(getMin());

    case SEC:
      return Integer.valueOf(getSec());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case YEAR:
      return isSetYear();
    case MONTH:
      return isSetMonth();
    case DATE:
      return isSetDate();
    case HRS:
      return isSetHrs();
    case MIN:
      return isSetMin();
    case SEC:
      return isSetSec();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof TimestampResponse)
      return this.equals((TimestampResponse)that);
    return false;
  }

  public boolean equals(TimestampResponse that) {
    if (that == null)
      return false;

    boolean this_present_year = true;
    boolean that_present_year = true;
    if (this_present_year || that_present_year) {
      if (!(this_present_year && that_present_year))
        return false;
      if (this.year != that.year)
        return false;
    }

    boolean this_present_month = true;
    boolean that_present_month = true;
    if (this_present_month || that_present_month) {
      if (!(this_present_month && that_present_month))
        return false;
      if (this.month != that.month)
        return false;
    }

    boolean this_present_date = true;
    boolean that_present_date = true;
    if (this_present_date || that_present_date) {
      if (!(this_present_date && that_present_date))
        return false;
      if (this.date != that.date)
        return false;
    }

    boolean this_present_hrs = true;
    boolean that_present_hrs = true;
    if (this_present_hrs || that_present_hrs) {
      if (!(this_present_hrs && that_present_hrs))
        return false;
      if (this.hrs != that.hrs)
        return false;
    }

    boolean this_present_min = true;
    boolean that_present_min = true;
    if (this_present_min || that_present_min) {
      if (!(this_present_min && that_present_min))
        return false;
      if (this.min != that.min)
        return false;
    }

    boolean this_present_sec = true;
    boolean that_present_sec = true;
    if (this_present_sec || that_present_sec) {
      if (!(this_present_sec && that_present_sec))
        return false;
      if (this.sec != that.sec)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_year = true;
    list.add(present_year);
    if (present_year)
      list.add(year);

    boolean present_month = true;
    list.add(present_month);
    if (present_month)
      list.add(month);

    boolean present_date = true;
    list.add(present_date);
    if (present_date)
      list.add(date);

    boolean present_hrs = true;
    list.add(present_hrs);
    if (present_hrs)
      list.add(hrs);

    boolean present_min = true;
    list.add(present_min);
    if (present_min)
      list.add(min);

    boolean present_sec = true;
    list.add(present_sec);
    if (present_sec)
      list.add(sec);

    return list.hashCode();
  }

  @Override
  public int compareTo(TimestampResponse other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetYear()).compareTo(other.isSetYear());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetYear()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.year, other.year);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMonth()).compareTo(other.isSetMonth());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMonth()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.month, other.month);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetDate()).compareTo(other.isSetDate());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetDate()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.date, other.date);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetHrs()).compareTo(other.isSetHrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetHrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.hrs, other.hrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMin()).compareTo(other.isSetMin());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMin()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.min, other.min);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSec()).compareTo(other.isSetSec());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSec()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sec, other.sec);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("TimestampResponse(");
    boolean first = true;

    sb.append("year:");
    sb.append(this.year);
    first = false;
    if (!first) sb.append(", ");
    sb.append("month:");
    sb.append(this.month);
    first = false;
    if (!first) sb.append(", ");
    sb.append("date:");
    sb.append(this.date);
    first = false;
    if (!first) sb.append(", ");
    sb.append("hrs:");
    sb.append(this.hrs);
    first = false;
    if (!first) sb.append(", ");
    sb.append("min:");
    sb.append(this.min);
    first = false;
    if (!first) sb.append(", ");
    sb.append("sec:");
    sb.append(this.sec);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // alas, we cannot check 'year' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'month' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'date' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'hrs' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'min' because it's a primitive and you chose the non-beans generator.
    // alas, we cannot check 'sec' because it's a primitive and you chose the non-beans generator.
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class TimestampResponseStandardSchemeFactory implements SchemeFactory {
    public TimestampResponseStandardScheme getScheme() {
      return new TimestampResponseStandardScheme();
    }
  }

  private static class TimestampResponseStandardScheme extends StandardScheme<TimestampResponse> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, TimestampResponse struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // YEAR
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.year = iprot.readI32();
              struct.setYearIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // MONTH
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.month = iprot.readI32();
              struct.setMonthIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // DATE
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.date = iprot.readI32();
              struct.setDateIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // HRS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.hrs = iprot.readI32();
              struct.setHrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // MIN
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.min = iprot.readI32();
              struct.setMinIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // SEC
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.sec = iprot.readI32();
              struct.setSecIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      if (!struct.isSetYear()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'year' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMonth()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'month' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetDate()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'date' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetHrs()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'hrs' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetMin()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'min' was not found in serialized data! Struct: " + toString());
      }
      if (!struct.isSetSec()) {
        throw new org.apache.thrift.protocol.TProtocolException("Required field 'sec' was not found in serialized data! Struct: " + toString());
      }
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, TimestampResponse struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(YEAR_FIELD_DESC);
      oprot.writeI32(struct.year);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MONTH_FIELD_DESC);
      oprot.writeI32(struct.month);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(DATE_FIELD_DESC);
      oprot.writeI32(struct.date);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(HRS_FIELD_DESC);
      oprot.writeI32(struct.hrs);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(MIN_FIELD_DESC);
      oprot.writeI32(struct.min);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(SEC_FIELD_DESC);
      oprot.writeI32(struct.sec);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class TimestampResponseTupleSchemeFactory implements SchemeFactory {
    public TimestampResponseTupleScheme getScheme() {
      return new TimestampResponseTupleScheme();
    }
  }

  private static class TimestampResponseTupleScheme extends TupleScheme<TimestampResponse> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, TimestampResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      oprot.writeI32(struct.year);
      oprot.writeI32(struct.month);
      oprot.writeI32(struct.date);
      oprot.writeI32(struct.hrs);
      oprot.writeI32(struct.min);
      oprot.writeI32(struct.sec);
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, TimestampResponse struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      struct.year = iprot.readI32();
      struct.setYearIsSet(true);
      struct.month = iprot.readI32();
      struct.setMonthIsSet(true);
      struct.date = iprot.readI32();
      struct.setDateIsSet(true);
      struct.hrs = iprot.readI32();
      struct.setHrsIsSet(true);
      struct.min = iprot.readI32();
      struct.setMinIsSet(true);
      struct.sec = iprot.readI32();
      struct.setSecIsSet(true);
    }
  }

}

